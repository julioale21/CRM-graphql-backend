type Customer {
  id: ID
  name: String
  lastName: String
  company: String
  emails: [Email]
  age: Int
  type: CustomerType
  orders: [Order]
}

type Email {
  email: String
}

type Product {
  id: ID
  name: String!
  price: Int!
  stock: Int!
}

type Order {
  id: ID
  order: [ProductOrder]
  total: Int
  date: String
  customer: ID
  status: OrderStatus
}

type ProductOrder {
  id: ID
  quantity: Int
}

type TopCustomer {
  total: Float
  customer: [Customer]
}

type Token {
  token: String
}

type User {
  username: String
}

"""
 Types of valid customers
"""
enum CustomerType {
  BASIC
  PREMIUM
}

"""
 Types of valid status of a order
"""
enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

"""
 Fields input an email
"""
input EmailInput {
  email: String
}

"""
 Fields to create a new customer
"""
input CustomerInput {
  id: ID
  name: String!
  lastName: String!
  company: String!
  emails: [EmailInput]!
  age: Int!
  type: CustomerType!
}

input ProductInput {
  id: ID
  name: String!
  price: Int!
  stock: Int!
}

input OrderInput {
  id: ID
  order: [ProductOrderInput]
  total: Int
  date: String
  customer: ID
  status: OrderStatus
}

input ProductOrderInput {
  id: ID
  quantity: Int
}

type Query {
  # Customers

  """
   Get all customers - Optionally you can paginate it passing a limit of result and a offset
  """
  getCustomers(limit: Int, offset: Int): [Customer]

  """
   Get a specific customer by id
  """
  getCustomer(id: ID!): Customer

  """
   Get total of customers on db
  """
  totalCustomers: String

  # Products

  """
   Get all Products - Optionally you can paginate it passing a limit of result and a offset
  """
  getProducts(limit: Int, offset: Int, stock: Boolean): [Product]

  """
   Get a specific product by id
  """
  getProduct(id: ID!): Product

  """
   Get total of products on db

  """
  totalProducts: String

  # Orders

  """
   Get all orders by customer

  """
  getOrders(customer: String): [Order]

  """
   Get top 10 best customers

  """
  topCustomers: [TopCustomer]

  """ Get current user """
  getUser: User
}

type Mutation {
  #Customers

  """
   Create new customer
  """
  createCustomer(input: CustomerInput): Customer

  """
   Update an existing customer
  """
  updateCustomer(input: CustomerInput): Customer

  """
   Delete a customer by id
  """
  deleteCustomer(id: ID!): String

  # Products

  """
   Create a new product
  """
  createProduct(input: ProductInput): Product

  """
   Update an existing product
  """
  updateProduct(input: ProductInput): Product

  """
   Delete a product by id
  """
  deleteProduct(id: ID!): String

  # Orders

  """
   Create a new Order
  """
  createOrder(input: OrderInput): Order

  """
   Update the status of a given order
  """
  updateOrderStatus(input: OrderInput): String

  # Users

  """ Create a new User """
  createUser(username: String!, name: String!, role: String!, password: String!): String

  """ Authenticate a user by username and password """
  authenticateUser(username: String!, password: String!): Token
}
