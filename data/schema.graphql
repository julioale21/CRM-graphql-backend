  type Customer {
    id: ID
    name: String
    lastName: String
    company: String
    emails: [Email]
    age: Int
    type: CustomerType
    orders: [Order]
  }

  type Email {
    email: String
  }

  type Product {
    id: ID
    name: String!
    price: Int!
    stock: Int!
  }

  type Order {
    product: String
    price: Int
  }

  """ Types of valid customers """
  enum CustomerType {
    BASIC
    PREMIUM
  }

  """ Fields input an email """
  input EmailInput {
    email: String
  }

  """ Fields to create a new order """
  input OrderInput {
    product: String
    price: Int
  }

  """ Fields to create a new customer """
  input CustomerInput {
    id: ID
    name: String!
    lastName: String!
    company: String!
    emails: [EmailInput]!
    age: Int!
    type: CustomerType!
    orders: [OrderInput]
  }

  input ProductInput {
    id: ID
    name: String!
    price: Int!
    stock: Int!
  }

  type Query {
    # Customers

    """ Get all customers - Optionally you can paginate it passing a limit of result and a offset """
    getCustomers(limit: Int, offset: Int): [Customer]

    """ Get a specific customer by id """
    getCustomer(id: ID!): Customer

    """ Get total of customers on db """
    totalCustomers: String,

    # Products

    """ Get all Products - Optionally you can paginate it passing a limit of result and a offset """
    getProducts(limit: Int, offset: Int): [Product]

    """ Get a specific product by id """
    getProduct(id: ID!): Product

  }

  
  type Mutation {
    #Customers

    """ Create new customer """
    createCustomer(input: CustomerInput): Customer

    """ Update an existing customer """
    updateCustomer(input: CustomerInput): Customer

    """ Delete a customer by id """
    deleteCustomer(id: ID!): String

    # Products

    """ Create a new product """
    createProduct(input: ProductInput): Product

    """ Update an existing product """
    updateProduct(input: ProductInput): Product

    """ Delete a product by id """
    deleteProduct(id: ID!): String
  }